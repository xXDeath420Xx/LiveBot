<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CertiFried Announcer - The Ultimate Stream Announcer Bot</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <!-- Updated version number to ensure fresh CSS is loaded -->
    <link rel="stylesheet" href="/css/landing.css?v=1.0.3">
</head>
<body>
    <%- include('partials/header-landing.ejs') %>
    <div class="container">
        <header class="hero">
            <img src="/images/CertiFried.png" alt="CertiFried Announcer Logo" class="hero-logo">
            <h1>CertiFried Announcer</h1>
            <p>The multi-platform stream announcer bot with unparalleled customization, speed, and reliability. Never miss a stream again.</p>
            <div class="hero-buttons">
                <a href="https://discord.com/oauth2/authorize?client_id=<%= client_id %>&permissions=536873992&scope=bot+applications.commands" class="btn btn-primary">
                    <i class="fab fa-discord"></i> Add to Your Server
                </a>
                <a href="/dashboard" class="btn btn-secondary">
                    <i class="fas fa-tachometer-alt"></i> Open Dashboard
                </a>
            </div>
        </header>

        <section class="features">
            <div class="features-grid">
                
              <div class="feature-card"><h3><i class="fas fa-desktop text-info me-2"></i>Full Web Dashboard</h3><ul><li>View and manage all your servers from one place.</li><li>Add, remove, and fully configure streamers with a few clicks.</li><li>See who's live at a glance with the live status viewer.</li></ul></div>
                <div class="feature-card"><h3><i class="fas fa-sync-alt text-success me-2"></i>Automated Team Sync</h3><ul><li>Subscribe a Discord channel to a Twitch Team with <code>/subscribe-team</code>.</li><li>The bot automatically adds new team members.</li><li>It also automatically removes members who have left or been removed from the team.</li></ul></div>
                <div class="feature-card"><h3><i class="fas fa-paint-brush me-2"></i>Complete Customization</h3><ul><li>Use <code>/customize-streamer</code> to set unique messages for any streamer.</li><li>Utilize placeholders like <code>{username}</code>, <code>{url}</code>, and <code>{game}</code>.</li><li>Override webhook names and avatars per-streamer or per-channel.</li></ul></div>


                <div class="feature-card">
                    <h3><i class="fas fa-cogs"></i> Unmatched Customization</h3>
                    <p>From custom webhook avatars and nicknames to per-streamer or per-channel messages, tailor every detail of your announcements.</p>
                    <ul>
                        <li>Server-wide custom bot appearance</li>
                        <li>Channel-specific webhook settings</li>
                        <li>Individual streamer announcement overrides</li>
                    </ul>
                </div>

                <div class="feature-card" id="live-feature-card">
                    <h3><i class="fas fa-signal"></i> Reliable & Fast</h3>
                    <p>
                        Next stream check in: <strong id="stream-countdown" class="text-white">--:--</strong><br>
                        Next team sync in: <strong id="team-countdown" class="text-white">--:--</strong><br>
                        Here's an example of who's live across all servers right now!
                    </p>
                    <div id="featured-streamers-container" class="mt-3">
                        <!-- Live streamers will be injected here by JavaScript -->
                    </div>
                </div>
            </div>
        </section>

    </div>
    <%- include('partials/footer') %>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Countdown Timer Logic
            const streamCountdownEl = document.getElementById('stream-countdown');
            const teamCountdownEl = document.getElementById('team-countdown');
            const streamInterval = 1.5 * 60 * 1000;
            const teamInterval = 15 * 60 * 1000;

            function formatTime(ms) {
                let totalSeconds = Math.floor(ms / 1000);
                let minutes = Math.floor(totalSeconds / 60);
                let seconds = totalSeconds % 60;
                return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
            }

            function updateCountdowns() {
                const now = Date.now();
                streamCountdownEl.textContent = formatTime(streamInterval - (now % streamInterval));
                teamCountdownEl.textContent = formatTime(teamInterval - (now % teamInterval));
            }
            updateCountdowns();
            setInterval(updateCountdowns, 1000);


            // Live Streamer Fetching Logic
            const featuredContainer = document.getElementById('featured-streamers-container');
            async function fetchFeaturedStreamers() {
                try {
                    const response = await fetch('/api/global-live-status');
                    if (!response.ok) {
                        featuredContainer.innerHTML = '<p class="text-muted">Could not load live streamers.</p>';
                        return;
                    }
                    const streamers = await response.json();

                    if (!streamers || streamers.length === 0) {
                        featuredContainer.innerHTML = '<p class="text-muted">No one is currently live.</p>';
                        return;
                    }
                    
                    featuredContainer.innerHTML = '';
                    streamers.forEach(streamer => {
                        const card = document.createElement('div');
                        // *** THIS IS THE CORRECTED LINE ***
                        // It now adds the platform class to the main card element
                        const primaryPlatform = streamer.live_platforms[0].platform.toLowerCase();
                        card.className = `featured-streamer-card platform-${primaryPlatform}`;

                        const platformsHtml = streamer.live_platforms.map(p => 
                            `<span class="live-platform-pill platform-${p.platform.toLowerCase()}">${p.platform}</span>`
                        ).join('');

                        card.innerHTML = `
                            <img src="${streamer.avatar_url}" alt="${streamer.username}" class="featured-avatar">
                            <div class="featured-info">
                                <span class="username">${streamer.username}</span>
                                <div class="pills-container">${platformsHtml}</div>
                                <span class="game">${streamer.live_platforms[0].game}</span>
                            </div>
                        `;
                        featuredContainer.appendChild(card);
                    });
                } catch (error) {
                    console.error("Error fetching featured streamers:", error);
                    featuredContainer.innerHTML = '<p class="text-muted">Error loading live streamers.</p>';
                }
            }
            fetchFeaturedStreamers();
            setInterval(fetchFeaturedStreamers, 60000);
        });
    </script>
</body>
</html>