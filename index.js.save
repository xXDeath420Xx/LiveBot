 try {
        const [guilds] = await db.execute('SELECT guild_id, announcement_channel_id, live_role_id FROM guilds');
        const twentyFourHoursAgo = Date.now() - (24 * 60 * 60 * 1000);

        for (const guildSettings of guilds) {
            // Purge messages
            if (guildSettings.announcement_channel_id) {
                try {
                    const channel = await client.channels.fetch(guildSettings.announcement_channel_id);
                    if (!channel?.isTextBased()) continue;

                    const messages = await channel.messages.fetch({ limit: 100 });
                    const messagesToDelete = messages.filter(m => m.author.id === client.user.id && m.createdTimestamp > twentyFourHoursAgo);
                    if (messagesToDelete.size > 0) {
                        console.log(`[Purge] Deleting ${messagesToDelete.size} message(s) from #${channel.name}.`);
                        await channel.bulkDelete(messagesToDelete, true);
                    }
                } catch (err) { if(err.code !== 10003) console.error(`[Purge] Message cleanup failed for channel ${guildSettings.announcement_channel_id}:`, err.message); }
            }

            // Purge live roles
            if (guildSettings.live_role_id) {
                try {
                    const guild = await client.guilds.fetch(guildSettings.guild_id);
                    const role = await guild.roles.fetch(guildSettings.live_role_id);
                    if (!role) continue;
                    
                    console.log(`[Purge] Clearing live role @${role.name} for all members in ${guild.name}...`);
                    for (const member of role.members.values()) {
                         await member.roles.remove(role).catch(e => console.error(`Failed to remove role from ${member.user.tag}: ${e.message}`));
                    }
                } catch (err) { if(err.code !== 10003) console.error(`[Purge] Role cleanup failed for guild ${guildSettings.guild_id}:`, err.message); }
            }
        }
    } catch (error) { console.error('[Purge] Failed to run startup cleanup:', error); }
    console.log('[Purge] Cleanup process finished.');
}


// --- Main Stream Check Loop ---
async function checkStreams() {
    try {
        const [allSubscriptions] = await db.execute(`
            SELECT s.*, sub.guild_id, sub.custom_message, g.announcement_channel_id, g.live_role_id
            FROM subscriptions sub JOIN streamers s ON sub.streamer_id=s.streamer_id LEFT JOIN guilds g ON sub.guild_id=g.guild_id WHERE g.announcement_channel_id IS NOT NULL
        `);
        if (allSubscriptions.length === 0) return;

        const [previouslyAnnounced] = await db.execute('SELECT * FROM announcements');
        const announcedUserMap = byGuildAndUserMap(previouslyAnnounced);

        for (const sub of allSubscriptions) {
            let apiResult, liveData = null;
            if (sub.platform === 'twitch') apiResult = await checkTwitch(sub);
            else if (sub.platform === 'youtube') apiResult = await checkYouTube(sub.platform_user_id);
            else if (sub.platform === 'ki await checkKick(sub.username);
            else if (sub.platform === 'tiktok') apiResult = await checkTikTok(sub.username);
            else if (sub.platform === 'trovo') apiResult = await checkTrovo(sub.username);
            
            if (sub.platform === 'twitch' && apiResult?.length > 0) { const d = apiResult[0]; liveData = { username: d.user_name, url: `https://www.twitch.tv/${d.user_login}`, title: d.title, game: d.game_name, thumbnailUrl: d.thumbnail_url.replace('{width}', '1280').replace('{height}', '720') }; } 
            else if (sub.platform === 'youtube' && apiResult?.is_live) { liveData = { username: sub.username, ...apiResult }; } 
            else if (sub.platform === 'kick' && apiResult?.livestream) { const d = apiResult; liveData = { username: d.user.username, url: `https://kick.com/${d.user.username}`, title: d.livestream.session_title, game: d.livestream.categories[0]?.name, thumbnailUrl: d.livestream.thumbnail?.url }; } 
            else if (sub.platform === 'tiktok' && apiResult?.is_live) { liveData = { username: sub.username, url: `https://www.tiktok.com/@${sub.username}/live`, title: 'Live on TikTok', ...apiResult }; } 
            else if (sub.platform === 'trovo' && apiResult?.is_live) { liveData = { username: apiResult.username, url: apiResult.channel_url, title: apiResult.title, game: apiResult.category_name, thumbnailUrl: apiResult.thumbnail }; }

            const isLive = !!liveData;
            sub.liveData = liveData;

            const userKey = sub.discord_user_id || `username:${sub.username.toLowerCase()}`;
            const isAnnounced = announcedUserMap.get(sub.guild_id)?.has(userKey);
            let member;
            if (sub.live_role_id && sub.discord_user_id) {
                try { member = await client.guilds.cache.get(sub.guild_id)?.members.
